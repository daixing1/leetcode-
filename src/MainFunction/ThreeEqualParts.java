package MainFunction;

/**
 * User: 兴希
 * Date: 2020/7/25
 * Time: 21:06
 * Description: 给定一个由 0 和 1 组成的数组 A，将数组分成 3 个非空的部分，使得所有这些部分表示相同的二进制值。
 *              如果可以做到，请返回任何 [i, j]，其中 i+1 < j，这样一来：
 *                  A[0], A[1], ..., A[i] 组成第一部分；
 *                  A[i+1], A[i+2], ..., A[j-1] 作为第二部分；
 *                  A[j], A[j+1], ..., A[A.length - 1] 是第三部分。
 *              这三个部分所表示的二进制值相等。
 *              如果无法做到，就返回 [-1, -1]。
 *              注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，[1,1,0] 表示十进制中的 6，
 *              而不会是 3。此外，前导零也是被允许的，所以 [0,1,1] 和 [1,1] 表示相同的值。
 */
public class ThreeEqualParts {
    public int[] threeEqualParts(int[] A) {
        int left = 0;
        int right = A.length-1;
        long leftNum = 0;
        long rightNum = 0;
        long midNum = 0;
        int tmp = 0;
        while (true){
            if (left+1>=right){
                return new int[]{-1,-1};
            }

            if (leftNum==rightNum){
//                midNum = getDigit(A,left+1,right-1);
                if (leftNum==midNum){
                    return new int[]{left,right};
                }
                if (leftNum>midNum){
                    return new int[]{-1,-1};
                }
                right--;
                continue;
            }else if (leftNum<rightNum){
                left++;
                continue;
            }else {
                right--;
            }
        }
    }

//    private int getDigit(int[] nums, int start1, int end1, int start2, int end2){
//        int n = 0;
//        for (int i=end1)
//    }

    public static void main(String[] args) {
        ThreeEqualParts threeEqualParts = new ThreeEqualParts();
        int[] ints = threeEqualParts.threeEqualParts(new int[]{1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,1,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,0});
        System.out.println(ints);
    }
}
