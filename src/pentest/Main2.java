package pentest;

import java.util.*;

/**
 * User: 兴希
 * Date: 2020/8/2
 * Time: 19:22
 * Description: No Description
 */
public class Main2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] nums = new int[n][6];
        for (int i=0;i<nums.length;i++){
            for (int j=0;j<6;j++){
                nums[i][j] = scanner.nextInt();
            }
        }
        finish(n,nums);
    }

    private static void finish(int n, int[][] nums){
        List<Map<Integer, Integer>> list = new ArrayList<>();
        List<Set<Integer>> res = new ArrayList<>();
        for (int i=0;i<n;i++){
            Map<Integer, Integer> map = getMap(nums[i]);
            if (list.isEmpty()){
                list.add(map);
                Set<Integer> set = new HashSet<>();
                set.add(i);
                res.add(set);
            }else {
                boolean flag = false;
                for (int j=0;j<list.size();j++){
                    if (judge(list.get(j),map)){
                        res.get(j).add(i);
                        flag = true;
                    }
                }
                if (!flag){
                    list.add(map);
                    Set<Integer> set = new HashSet<>();
                    set.add(i);
                    res.add(set);
                }
            }
        }
        System.out.println(res.size());
        String ss = "";
        for (Set<Integer> s:res){
            ss+=s.size()+" ";
        }
        System.out.println(ss.substring(0,ss.length()-1));
    }

    private static boolean judge(Map<Integer, Integer> map, Map<Integer, Integer> map1){
        int count = 0;
        Iterator<Map.Entry<Integer, Integer>> iterator = map.entrySet().iterator();
        while (iterator.hasNext()){
            Map.Entry<Integer, Integer> next = iterator.next();
            if (map1.containsKey(next.getKey())&&map1.get(next.getKey())==next.getValue()){
                continue;
            }else if (map1.containsKey(next.getValue())&&map1.get(next.getValue())==next.getKey()){
                count++;
            }else {
                return false;
            }
        }
        return (count&1)==0;
    }

    private static Map<Integer, Integer> getMap(int[] nums){
        Map<Integer, Integer> map = new HashMap<>();
        map.put(nums[0],nums[1]);
        map.put(nums[2],nums[3]);
        map.put(nums[4],nums[5]);
        return map;
    }
}
